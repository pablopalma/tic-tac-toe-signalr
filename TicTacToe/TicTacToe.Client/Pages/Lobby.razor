@page "/"
@using BlazorTicTacToe.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<h3 class="text-4xl font-bold py-4">Welcome to Blazor Tic Tac Toe Game!</h3>

@if(_currentRoom is null)
{
    <input @bind="@_playerName" placeholder="Your name" class="rounded-md my-2 p-2 text-blac" />
    <input @bind="@_currentRoomName" placeholder="Room name" class="rounded-md my-2 p-2 text-blac" />
    <button @onclick="@CreateRoom" class="rounded-md my-2 p-2 text-blac"> Create Room </button>

    <h3>Rooms:</h3>
    <ul>
        @foreach (var room in _rooms)
        {
            <li>@room.RoomName <button class="rounded-md bg-blue-400 text-white py-2" onclick="@(() => JoinRoom(room.RoomId.ToString()))">Join room</button></li>
        }
    </ul>
}
else
{
    <CascadingValue Value="_hubConnection">
        <Room CurrentRoom="_currentRoom" />
    </CascadingValue>
}

@code {

    private HubConnection? _hubConnection;
    private string _playerName = string.Empty;
    private string _currentRoomName = string.Empty;
    private GameRoom? _currentRoom;
    private List<GameRoom> _rooms = new();

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        _hubConnection.On<List<GameRoom>>("Rooms", (roomList) =>
        {
            Console.WriteLine($"We got rooms!!! Count = {roomList.Count}");
            _rooms = roomList;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task CreateRoom()
    {
        if (_hubConnection is null) return;
        _currentRoom = await _hubConnection.InvokeAsync<GameRoom>("CreateRoomAsync", _currentRoomName, _playerName);
    }

    private async Task JoinRoom(string roomId)
    {
        if (_hubConnection is null) return;
        var joinedRoom = await _hubConnection.InvokeAsync<GameRoom>("JoinRoom", roomId, _playerName);

        if (joinedRoom is not null)
        {
            _currentRoom = joinedRoom;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Room is full or does no exist.");
        }
    }
}
